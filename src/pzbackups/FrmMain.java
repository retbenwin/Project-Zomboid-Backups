/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package pzbackups;

import java.awt.Cursor;
import java.io.IOException;
import java.util.HashSet;
import java.util.Objects;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 *
 * @author retbenwin
 */
public class FrmMain extends javax.swing.JFrame {

    private SettingsManager settings;
    private BackupManager backups;
    private String[] saves;

    private boolean initing;
    
    /**
     * Creates new form FrmMain
     */
    public FrmMain() {
        try
        {
            System.out.println("Initing...");
            this.initing = true;
            System.out.println("Loading BackupManager...");
            this.backups = new BackupManager();
            System.out.println("Loading SettingsManager...");
            this.settings = SettingsManager.getInstance();           
            System.out.println("Loading Components...");
            initComponents();
            System.out.println("Loading ImageIcon...");
            ImageIcon img = new ImageIcon("icon.png");
            this.setIconImage(img.getImage());
            System.out.println("Loading GameModes...");
            for(String gameMode: this.settings.getPZGameModes()){
                this.cboGamemode.addItem(gameMode);
            }
            System.out.println("Loading GamemodeSelected...");
            if(this.cboGamemode.getItemCount() - 1 >= this.settings.getPosGamemodeSelected()){
                this.cboGamemode.setSelectedIndex(this.settings.getPosGamemodeSelected());
            }        
            readSaves();
            saveSettings();
            this.initing = false;
            System.out.println("Finished Initing...");
        }
        catch(Exception ex){
            System.out.println(ex.getMessage());
            System.out.println(ex.toString());
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            System.exit(0);
        }
    }
    
    private void saveSettings(){
        try{
            System.out.println("Saving Settings...");
            this.settings.setPosGamemodeSelected(cboGamemode.getSelectedIndex());
            if(this.cboSaves.getSelectedIndex() >= 0){
                this.settings.setSaveSelected(this.cboSaves.getItemAt(this.cboSaves.getSelectedIndex()));
            }else{
                this.settings.setSaveSelected("");
            }
            this.settings.saveSettings();
        }catch(Exception ex){
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void readSaves() throws IOException{
        System.out.println("Reading Saves...");
        this.cboSaves.removeAllItems();
        this.saves = backups.getSaves(this.settings.getPZGameModes()[cboGamemode.getSelectedIndex()]);
        if(this.saves == null){
            System.out.println("warning: saves is null");
        }
        int posSave = 0;
        for (int i = 0; i < this.saves.length; i++) {
            System.out.println(this.saves[i]);
            System.out.println(this.settings.getSaveSelected());
            if(this.saves[i].equals(this.settings.getSaveSelected()) ){
                posSave = i;
            }
            this.cboSaves.addItem(this.saves[i]);
        }
        if(this.saves.length > 0){
            this.cboSaves.setSelectedIndex(posSave);
        }   
    }   

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings({"unchecked", "deprecation"})
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cboGamemode = new javax.swing.JComboBox<>();
        btnBackupNow = new javax.swing.JButton();
        btnRestore = new javax.swing.JButton();
        btnClose = new javax.swing.JButton();
        cboSaves = new javax.swing.JComboBox<>();
        btnSavesFolder = new javax.swing.JButton();
        btnBackupsFolder = new javax.swing.JButton();
        lblGamemode = new javax.swing.JLabel();
        lblSave = new javax.swing.JLabel();
        btnReloadSaves = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Project Zomboid Backups");
        setResizable(false);

        cboGamemode.setToolTipText("");
        cboGamemode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboGamemodeActionPerformed(evt);
            }
        });

        btnBackupNow.setText("Backup Now");
        btnBackupNow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackupNowActionPerformed(evt);
            }
        });

        btnRestore.setText("Restore");
        btnRestore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRestoreActionPerformed(evt);
            }
        });

        btnClose.setText("Close");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        cboSaves.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        cboSaves.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboSavesActionPerformed(evt);
            }
        });

        btnSavesFolder.setLabel("Saves");
        btnSavesFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSavesFolderActionPerformed(evt);
            }
        });

        btnBackupsFolder.setLabel("Backups");
        btnBackupsFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackupsFolderActionPerformed(evt);
            }
        });

        lblGamemode.setText("Select Gamemode:");

        lblSave.setText("Select Game:");

        btnReloadSaves.setText("â†º");
        btnReloadSaves.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReloadSavesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cboGamemode, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnBackupNow, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(117, 117, 117))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(btnSavesFolder, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnClose)))
                        .addGap(52, 52, 52)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnBackupsFolder, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnRestore, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblGamemode)
                            .addComponent(lblSave)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cboSaves, javax.swing.GroupLayout.PREFERRED_SIZE, 361, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnReloadSaves)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(lblGamemode)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cboGamemode, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblSave)
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cboSaves, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnReloadSaves))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBackupNow)
                    .addComponent(btnRestore))
                .addGap(72, 72, 72)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnClose)
                    .addComponent(btnSavesFolder)
                    .addComponent(btnBackupsFolder))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        System.exit(0);
    }//GEN-LAST:event_btnCloseActionPerformed

    private void btnBackupNowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackupNowActionPerformed
        try {
            String saveGame = "";
            if(cboSaves.getItemCount() > 0){
                saveGame = (String)cboSaves.getSelectedItem();
            }
            this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
            Response res = this.backups.BackupNow(saveGame);
            this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            int tMsg = JOptionPane.INFORMATION_MESSAGE;
            String title = "Success";
            if(!res.isSuccess()){
                tMsg = JOptionPane.ERROR_MESSAGE;  
                title = "Error";
            }
            if(res.getMessage().length() > 0){
                JOptionPane.showMessageDialog(null, res.getMessage(), title, tMsg);
            }
        } catch (Exception ex) {
            this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnBackupNowActionPerformed

    private void btnSavesFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSavesFolderActionPerformed
        try {
            backups.OpenFolderWithExplorer(this.settings.getPZSavesPath());
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnSavesFolderActionPerformed

    private void btnBackupsFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackupsFolderActionPerformed
        try {
            backups.OpenFolderWithExplorer(this.settings.getPZBackupsPath());
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnBackupsFolderActionPerformed

    private void btnRestoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRestoreActionPerformed
        try {
            this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
            Response res = this.backups.Restore(this);
            this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            int tMsg = JOptionPane.INFORMATION_MESSAGE;
            String title = "Success";
            if(!res.isSuccess()){
                tMsg = JOptionPane.ERROR_MESSAGE;
                title = "Error";
            }
            if(res.getMessage().length() > 0){
                JOptionPane.showMessageDialog(null, res.getMessage(), title, tMsg);
            }
            if(res.isSuccess()){
                this.settings.setSaveSelected(res.getExtra());
                readSaves();
                saveSettings();
            }
        } catch (Exception ex) {
            this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnRestoreActionPerformed

    private void btnReloadSavesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReloadSavesActionPerformed
        try{
            readSaves();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnReloadSavesActionPerformed

    private void cboSavesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboSavesActionPerformed
       try{
            if(!this.initing){
                saveSettings();
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_cboSavesActionPerformed

    private void cboGamemodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboGamemodeActionPerformed
        try{
            if(!this.initing){
                saveSettings();
                readSaves();
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_cboGamemodeActionPerformed
  
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBackupNow;
    private javax.swing.JButton btnBackupsFolder;
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnReloadSaves;
    private javax.swing.JButton btnRestore;
    private javax.swing.JButton btnSavesFolder;
    private javax.swing.JComboBox<String> cboGamemode;
    private javax.swing.JComboBox<String> cboSaves;
    private javax.swing.JLabel lblGamemode;
    private javax.swing.JLabel lblSave;
    // End of variables declaration//GEN-END:variables
}
